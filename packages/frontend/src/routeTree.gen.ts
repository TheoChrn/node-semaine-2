/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authenticatedAuthenticatedImport } from './routes/(authenticated)/_authenticated'
import { Route as authAuthRouteImport } from './routes/(auth)/auth/route'
import { Route as authenticatedAuthenticatedDashboardImport } from './routes/(authenticated)/_authenticated/dashboard'
import { Route as authAuthRegisterImport } from './routes/(auth)/auth/register'
import { Route as authAuthLoginImport } from './routes/(auth)/auth/login'
import { Route as authenticatedAuthenticatedDashboardAddFeatureImport } from './routes/(authenticated)/_authenticated/dashboard.add-feature'

// Create Virtual Routes

const authenticatedImport = createFileRoute('/(authenticated)')()

// Create/Update Routes

const authenticatedRoute = authenticatedImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedAuthenticatedRoute = authenticatedAuthenticatedImport.update(
  {
    id: '/_authenticated',
    getParentRoute: () => authenticatedRoute,
  } as any,
)

const authAuthRouteRoute = authAuthRouteImport.update({
  id: '/(auth)/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedAuthenticatedDashboardRoute =
  authenticatedAuthenticatedDashboardImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => authenticatedAuthenticatedRoute,
  } as any)

const authAuthRegisterRoute = authAuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authAuthRouteRoute,
} as any)

const authAuthLoginRoute = authAuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authAuthRouteRoute,
} as any)

const authenticatedAuthenticatedDashboardAddFeatureRoute =
  authenticatedAuthenticatedDashboardAddFeatureImport.update({
    id: '/add-feature',
    path: '/add-feature',
    getParentRoute: () => authenticatedAuthenticatedDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)/auth': {
      id: '/(auth)/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof authAuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/_authenticated': {
      id: '/(authenticated)/_authenticated'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedAuthenticatedImport
      parentRoute: typeof authenticatedRoute
    }
    '/(auth)/auth/login': {
      id: '/(auth)/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof authAuthLoginImport
      parentRoute: typeof authAuthRouteImport
    }
    '/(auth)/auth/register': {
      id: '/(auth)/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof authAuthRegisterImport
      parentRoute: typeof authAuthRouteImport
    }
    '/(authenticated)/_authenticated/dashboard': {
      id: '/(authenticated)/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof authenticatedAuthenticatedDashboardImport
      parentRoute: typeof authenticatedAuthenticatedImport
    }
    '/(authenticated)/_authenticated/dashboard/add-feature': {
      id: '/(authenticated)/_authenticated/dashboard/add-feature'
      path: '/add-feature'
      fullPath: '/dashboard/add-feature'
      preLoaderRoute: typeof authenticatedAuthenticatedDashboardAddFeatureImport
      parentRoute: typeof authenticatedAuthenticatedDashboardImport
    }
  }
}

// Create and export the route tree

interface authAuthRouteRouteChildren {
  authAuthLoginRoute: typeof authAuthLoginRoute
  authAuthRegisterRoute: typeof authAuthRegisterRoute
}

const authAuthRouteRouteChildren: authAuthRouteRouteChildren = {
  authAuthLoginRoute: authAuthLoginRoute,
  authAuthRegisterRoute: authAuthRegisterRoute,
}

const authAuthRouteRouteWithChildren = authAuthRouteRoute._addFileChildren(
  authAuthRouteRouteChildren,
)

interface authenticatedAuthenticatedDashboardRouteChildren {
  authenticatedAuthenticatedDashboardAddFeatureRoute: typeof authenticatedAuthenticatedDashboardAddFeatureRoute
}

const authenticatedAuthenticatedDashboardRouteChildren: authenticatedAuthenticatedDashboardRouteChildren =
  {
    authenticatedAuthenticatedDashboardAddFeatureRoute:
      authenticatedAuthenticatedDashboardAddFeatureRoute,
  }

const authenticatedAuthenticatedDashboardRouteWithChildren =
  authenticatedAuthenticatedDashboardRoute._addFileChildren(
    authenticatedAuthenticatedDashboardRouteChildren,
  )

interface authenticatedAuthenticatedRouteChildren {
  authenticatedAuthenticatedDashboardRoute: typeof authenticatedAuthenticatedDashboardRouteWithChildren
}

const authenticatedAuthenticatedRouteChildren: authenticatedAuthenticatedRouteChildren =
  {
    authenticatedAuthenticatedDashboardRoute:
      authenticatedAuthenticatedDashboardRouteWithChildren,
  }

const authenticatedAuthenticatedRouteWithChildren =
  authenticatedAuthenticatedRoute._addFileChildren(
    authenticatedAuthenticatedRouteChildren,
  )

interface authenticatedRouteChildren {
  authenticatedAuthenticatedRoute: typeof authenticatedAuthenticatedRouteWithChildren
}

const authenticatedRouteChildren: authenticatedRouteChildren = {
  authenticatedAuthenticatedRoute: authenticatedAuthenticatedRouteWithChildren,
}

const authenticatedRouteWithChildren = authenticatedRoute._addFileChildren(
  authenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/auth': typeof authAuthRouteRouteWithChildren
  '/': typeof authenticatedAuthenticatedRouteWithChildren
  '/auth/login': typeof authAuthLoginRoute
  '/auth/register': typeof authAuthRegisterRoute
  '/dashboard': typeof authenticatedAuthenticatedDashboardRouteWithChildren
  '/dashboard/add-feature': typeof authenticatedAuthenticatedDashboardAddFeatureRoute
}

export interface FileRoutesByTo {
  '/auth': typeof authAuthRouteRouteWithChildren
  '/': typeof authenticatedAuthenticatedRouteWithChildren
  '/auth/login': typeof authAuthLoginRoute
  '/auth/register': typeof authAuthRegisterRoute
  '/dashboard': typeof authenticatedAuthenticatedDashboardRouteWithChildren
  '/dashboard/add-feature': typeof authenticatedAuthenticatedDashboardAddFeatureRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)/auth': typeof authAuthRouteRouteWithChildren
  '/(authenticated)': typeof authenticatedRouteWithChildren
  '/(authenticated)/_authenticated': typeof authenticatedAuthenticatedRouteWithChildren
  '/(auth)/auth/login': typeof authAuthLoginRoute
  '/(auth)/auth/register': typeof authAuthRegisterRoute
  '/(authenticated)/_authenticated/dashboard': typeof authenticatedAuthenticatedDashboardRouteWithChildren
  '/(authenticated)/_authenticated/dashboard/add-feature': typeof authenticatedAuthenticatedDashboardAddFeatureRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/dashboard'
    | '/dashboard/add-feature'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/dashboard'
    | '/dashboard/add-feature'
  id:
    | '__root__'
    | '/(auth)/auth'
    | '/(authenticated)'
    | '/(authenticated)/_authenticated'
    | '/(auth)/auth/login'
    | '/(auth)/auth/register'
    | '/(authenticated)/_authenticated/dashboard'
    | '/(authenticated)/_authenticated/dashboard/add-feature'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authAuthRouteRoute: typeof authAuthRouteRouteWithChildren
  authenticatedRoute: typeof authenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authAuthRouteRoute: authAuthRouteRouteWithChildren,
  authenticatedRoute: authenticatedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)/auth",
        "/(authenticated)"
      ]
    },
    "/(auth)/auth": {
      "filePath": "(auth)/auth/route.tsx",
      "children": [
        "/(auth)/auth/login",
        "/(auth)/auth/register"
      ]
    },
    "/(authenticated)": {
      "filePath": "(authenticated)",
      "children": [
        "/(authenticated)/_authenticated"
      ]
    },
    "/(authenticated)/_authenticated": {
      "filePath": "(authenticated)/_authenticated.tsx",
      "parent": "/(authenticated)",
      "children": [
        "/(authenticated)/_authenticated/dashboard"
      ]
    },
    "/(auth)/auth/login": {
      "filePath": "(auth)/auth/login.tsx",
      "parent": "/(auth)/auth"
    },
    "/(auth)/auth/register": {
      "filePath": "(auth)/auth/register.tsx",
      "parent": "/(auth)/auth"
    },
    "/(authenticated)/_authenticated/dashboard": {
      "filePath": "(authenticated)/_authenticated/dashboard.tsx",
      "parent": "/(authenticated)/_authenticated",
      "children": [
        "/(authenticated)/_authenticated/dashboard/add-feature"
      ]
    },
    "/(authenticated)/_authenticated/dashboard/add-feature": {
      "filePath": "(authenticated)/_authenticated/dashboard.add-feature.tsx",
      "parent": "/(authenticated)/_authenticated/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
